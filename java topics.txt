
### **2. Object-Oriented Programming (OOP)**
- Classes and Objects  
- Constructors (Default, Parameterized)  
- Access Modifiers (public, private, protected, default)  
- Static and Non-static Members  
- **OOP Principles**:
  - Encapsulation
  - Inheritance
  - Polymorphism (Method Overloading and Method Overriding)
  - Abstraction (Abstract Classes and Interfaces)  
- `this` and `super` keywords  
- Inner Classes (Static, Non-static, Anonymous)  

---

### **3. Java Collections Framework**
- Collections Overview (List, Set, Map Interfaces)  
- ArrayList, LinkedList, HashSet, TreeSet, HashMap, LinkedHashMap, TreeMap  
- Iterators (`Iterator`, `ListIterator`, `for-each` loop)  
- Generics in Collections  
- Sorting and Searching:
  - Comparable and Comparator interfaces  
- Queue and Deque (PriorityQueue, ArrayDeque)  
- Best Practices for Using Collections  

### **5. File I/O**
- Reading and Writing Files:
  - `File` class
  - Streams (InputStream, OutputStream, FileReader, FileWriter)  
- Buffered Streams (BufferedReader, BufferedWriter)  
- Serialization and Deserialization  
- Working with Properties Files (`Properties` class)  
- New I/O (`java.nio` package)  

---

### **6. Java Utility Features**
- Date and Time API (`java.time` package)  
- Regular Expressions (`java.util.regex`)  
- Multithreading and Concurrency (Basics of Threads, `Runnable`, `synchronized`, `ExecutorService`)  
- Java 8 Features:
  - Lambda Expressions
  - Streams API
  - Functional Interfaces (`Consumer`, `Supplier`, `Predicate`, `Function`)  

---

### **Suggested Learning Flow**
1. Start with **Java Basics** to build a solid foundation.  
2. Dive into **OOP** as it’s the backbone of Java programming.  
3. Learn **Collections Framework** to handle data structures effectively.  
4. Master **Exception Handling** for writing robust code.  
5. Work on **File I/O** to manage files and streams.  
6. Explore **Utility Features** to enhance your coding skill set.  

---

### **Practical Steps**
- Practice each topic by building small projects or scripts (e.g., a Calculator, Employee Management System, or File Parser).  
- Keep uploading each topic with relevant examples and exercises to your Git repository.  
- Gradually progress to **Spring Boot** once you’ve completed Java Core.  

This structured path ensures you master Java Core effectively and lay a strong foundation for advanced concepts like Spring Boot.